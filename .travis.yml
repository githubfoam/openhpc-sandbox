language: ruby
dist: bionic #18.04
sudo: required
rvm:
  - 2.7
env:
  global:
  # - VAGRANT_VERSION="2.2.9"
notifications:
   slack:
      on_failure: always
   email:
     on_success: never # default: change
     on_failure: always # default: always
   webhooks: https://galaxy.ansible.com/api/v1/notifications/
fleet_script_vagrant_win_scoop_tasks : &fleet_script_vagrant_win_scoop_tasks
      script:
          - echo "============================================="
          - echo "=============Installing Vagrant scoop=============="
          # - Set-ExecutionPolicy RemoteSigned -scope CurrentUser
          # - Invoke-Expression (New-Object System.Net.WebClient).DownloadString('https://get.scoop.sh')
          # - iwr -useb get.scoop.sh | iex # or shorter #The command "iwr -useb get.scoop.sh | iex" exited with 127.
          # - scoop install vagrant
          # - vagrant version
          - echo "============================================="
fleet_script_vagrant_win_tasks : &fleet_script_vagrant_win_tasks
      script:
          - echo "============================================="
          - echo "=============Installing Vagrant chocolatey=============="
          # - choco feature disable --name=exitOnRebootDetected #exitOnRebootDetected was disabled by default. Explicitly setting value
          # - choco install vagrant # https://github.com/chocolatey/choco/issues/1927
          # - choco install vagrant --version 2.2.0
          # - choco install vagrant --${VAGRANT_VERSION}
          # - vagrant version #Packages requiring reboot: - vagrant (exit code 3010)
          - echo "============================================="
fleet_script_vagrant_macos_tasks : &fleet_script_vagrant_macos_tasks
      script:
          - echo "============================================="
          - echo "=============Installing Vagrant=============="
          - /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)" #Install Homebrew
          # - brew doctor
          # - brew update
          # - brew cask install virtualbox #Install Virtual Box Cask
          # - brew search vagrant
          # - brew cask install vagrant #Install Vagrant Casks
          - vagrant version
          - vagrant plugin install vagrant-libvirt #The vagrant-libvirt plugin is required when using KVM on Linux
          - vagrant plugin install vagrant-mutate #Convert vagrant boxes to work with different providers
          - vagrant status
          - vagrant box add "bento/centos-8.0"  --provider=virtualbox
          - vagrant mutate "bento/centos-8.0"  libvirt
          - vagrant global-status
          - vagrant up --provider=libvirt
          - vagrant global-status
          # - vagrant ssh -c "hostnamectl"
          - echo "============================================="
fleet_script_vagrant_bentosles15sp1_tasks : &fleet_script_vagrant_bentosles15sp1_tasks
      script:
          - sudo apt-get install -y cpu-checker bridge-utils dnsmasq-base ebtables libvirt-bin libvirt-dev qemu-kvm qemu-utils ruby-dev
          - sudo systemctl status libvirtd
          - sudo libvirtd --version
          - egrep -c '(vmx|svm)' /proc/cpuinfo #If 0 it means that your CPU doesn't support hardware virtualization.If 1 or more it does - but you still need to make sure that virtualization is enabled in the BIOS.
          - sudo addgroup libvirtd
          - sudo adduser  $(id -un) libvirtd #ensure that your username is added to the group libvirtd
          - sudo kvm-ok
          - echo "============================================="
          - echo "=============Installing Vagrant=============="
          - sudo apt-get install -qqy unzip jq
          - VAGRANT_CURRENT_VERSION="$(curl -s https://checkpoint-api.hashicorp.com/v1/check/vagrant | jq -r -M '.current_version')"
          - VAGRANT_URL="https://releases.hashicorp.com/vagrant/$VAGRANT_CURRENT_VERSION/vagrant_${VAGRANT_CURRENT_VERSION}_linux_amd64.zip"
          - VAGRANT_SHA256_URL="https://releases.hashicorp.com/vagrant/$VAGRANT_CURRENT_VERSION/vagrant_${VAGRANT_CURRENT_VERSION}_SHA256SUMS"
          - VAGRANT_SHA256_SIG_URL="https://releases.hashicorp.com/vagrant/$VAGRANT_CURRENT_VERSION/vagrant_${VAGRANT_CURRENT_VERSION}_SHA256SUMS.sig"
          - curl -LO "${VAGRANT_URL}"
          - curl -LO "${VAGRANT_SHA256_URL}"
          - curl -LO "${VAGRANT_SHA256_SIG_URL}"
          - HASHICORP_PUBLIC_KEY_URL="https://keybase.io/hashicorp/pgp_keys.asc" #https://www.hashicorp.com/security
          - 'curl -sSL "${HASHICORP_PUBLIC_KEY_URL}" | gpg --import -' # import the public key (PGP key)
          - gpg --verify "vagrant_${VAGRANT_CURRENT_VERSION}_SHA256SUMS.sig" "vagrant_${VAGRANT_CURRENT_VERSION}_SHA256SUMS" 2>/dev/null #Verify the signature file is untampered
          - shasum -a 256 -c "vagrant_${VAGRANT_CURRENT_VERSION}_SHA256SUMS" | sudo tee output.txt  # Verify the SHASUM matches the archive.
          - cat output.txt  | grep OK # print OK
          - unzip "vagrant_${VAGRANT_CURRENT_VERSION}_linux_amd64.zip"
          - sudo cp vagrant /usr/bin
          - vagrant version
          - echo "============================================="
          - sudo vagrant plugin install vagrant-libvirt #The vagrant-libvirt plugin is required when using KVM on Linux
          - sudo vagrant plugin install vagrant-mutate #Convert vagrant boxes to work with different providers
          - sudo vagrant status
          - sudo virsh list --all #show all running KVM/libvirt VMs
          - sudo vagrant box add "sles-12-sp3"  --provider=virtualbox
          # - sudo vagrant up --no-parallel --provider=libvirt
          - sudo vagrant mutate "sles-12-sp3"  libvirt
          - sudo vagrant box list #veridy installed boxes
          - sudo vagrant up  --provider=libvirt
          - sudo vagrant status #Check the status of the VMs to see that none of them have been created yet
          # - sudo vagrant up --provider=libvirt vg-irods01
          # - sudo vagrant up --no-parallel --provider=libvirt # vagrant serial runs
          # - travis_wait 40 sudo vagrant up --provider=libvirt
          - sudo vagrant global-status
          # - sudo vagrant ssh "vg-docker-01" -c "hostnamectl"
          - sudo vagrant ssh  -c "hostnamectl"
          - sudo virsh list --all #show all running KVM/libvirt VMs
fleet_script_vagrant_bentosles12sp3_tasks : &fleet_script_vagrant_bentosles12sp3_tasks
      script:
          - sudo apt-get install -y cpu-checker bridge-utils dnsmasq-base ebtables libvirt-bin libvirt-dev qemu-kvm qemu-utils ruby-dev
          - sudo systemctl status libvirtd
          - sudo libvirtd --version
          - egrep -c '(vmx|svm)' /proc/cpuinfo #If 0 it means that your CPU doesn't support hardware virtualization.If 1 or more it does - but you still need to make sure that virtualization is enabled in the BIOS.
          - sudo addgroup libvirtd
          - sudo adduser  $(id -un) libvirtd #ensure that your username is added to the group libvirtd
          - sudo kvm-ok
          - echo "============================================="
          - echo "=============Installing Vagrant=============="
          - sudo apt-get install -qqy unzip jq
          - VAGRANT_CURRENT_VERSION="$(curl -s https://checkpoint-api.hashicorp.com/v1/check/vagrant | jq -r -M '.current_version')"
          - VAGRANT_URL="https://releases.hashicorp.com/vagrant/$VAGRANT_CURRENT_VERSION/vagrant_${VAGRANT_CURRENT_VERSION}_linux_amd64.zip"
          - VAGRANT_SHA256_URL="https://releases.hashicorp.com/vagrant/$VAGRANT_CURRENT_VERSION/vagrant_${VAGRANT_CURRENT_VERSION}_SHA256SUMS"
          - VAGRANT_SHA256_SIG_URL="https://releases.hashicorp.com/vagrant/$VAGRANT_CURRENT_VERSION/vagrant_${VAGRANT_CURRENT_VERSION}_SHA256SUMS.sig"
          - curl -LO "${VAGRANT_URL}"
          - curl -LO "${VAGRANT_SHA256_URL}"
          - curl -LO "${VAGRANT_SHA256_SIG_URL}"
          - HASHICORP_PUBLIC_KEY_URL="https://keybase.io/hashicorp/pgp_keys.asc" #https://www.hashicorp.com/security
          - 'curl -sSL "${HASHICORP_PUBLIC_KEY_URL}" | gpg --import -' # import the public key (PGP key)
          - gpg --verify "vagrant_${VAGRANT_CURRENT_VERSION}_SHA256SUMS.sig" "vagrant_${VAGRANT_CURRENT_VERSION}_SHA256SUMS" 2>/dev/null #Verify the signature file is untampered
          - shasum -a 256 -c "vagrant_${VAGRANT_CURRENT_VERSION}_SHA256SUMS" | sudo tee output.txt  # Verify the SHASUM matches the archive.
          - cat output.txt  | grep OK # print OK
          - unzip "vagrant_${VAGRANT_CURRENT_VERSION}_linux_amd64.zip"
          - sudo cp vagrant /usr/bin
          - vagrant version
          - echo "============================================="
          - sudo vagrant plugin install vagrant-libvirt #The vagrant-libvirt plugin is required when using KVM on Linux
          - sudo vagrant plugin install vagrant-mutate #Convert vagrant boxes to work with different providers
          - sudo vagrant status
          - sudo virsh list --all #show all running KVM/libvirt VMs
          - sudo vagrant box add "sles-12-sp3"  --provider=virtualbox
          # - sudo vagrant up --no-parallel --provider=libvirt
          - sudo vagrant mutate "sles-12-sp3"  libvirt
          - sudo vagrant box list #veridy installed boxes
          - sudo vagrant up  --provider=libvirt
          - sudo vagrant status #Check the status of the VMs to see that none of them have been created yet
          # - sudo vagrant up --provider=libvirt vg-irods01
          # - sudo vagrant up --no-parallel --provider=libvirt # vagrant serial runs
          # - travis_wait 40 sudo vagrant up --provider=libvirt
          - sudo vagrant global-status
          - sudo vagrant ssh master01 -c "hostnamectl status"          
          - sudo virsh list --all #show all running KVM/libvirt VMs
fleet_script_vagrant_bentocentos7_tasks : &fleet_script_vagrant_bentocentos7_tasks
      script:
          - sudo apt-get install -y cpu-checker bridge-utils dnsmasq-base ebtables libvirt-bin libvirt-dev qemu-kvm qemu-utils ruby-dev
          - sudo systemctl status libvirtd
          - sudo libvirtd --version
          - egrep -c '(vmx|svm)' /proc/cpuinfo #If 0 it means that your CPU doesn't support hardware virtualization.If 1 or more it does - but you still need to make sure that virtualization is enabled in the BIOS.
          - sudo addgroup libvirtd
          - sudo adduser  $(id -un) libvirtd #ensure that your username is added to the group libvirtd
          - sudo kvm-ok
          - echo "============================================="
          - echo "=============Installing Vagrant=============="
          - sudo apt-get install -qqy unzip jq
          - VAGRANT_CURRENT_VERSION="$(curl -s https://checkpoint-api.hashicorp.com/v1/check/vagrant | jq -r -M '.current_version')"
          - VAGRANT_URL="https://releases.hashicorp.com/vagrant/$VAGRANT_CURRENT_VERSION/vagrant_${VAGRANT_CURRENT_VERSION}_linux_amd64.zip"
          - VAGRANT_SHA256_URL="https://releases.hashicorp.com/vagrant/$VAGRANT_CURRENT_VERSION/vagrant_${VAGRANT_CURRENT_VERSION}_SHA256SUMS"
          - VAGRANT_SHA256_SIG_URL="https://releases.hashicorp.com/vagrant/$VAGRANT_CURRENT_VERSION/vagrant_${VAGRANT_CURRENT_VERSION}_SHA256SUMS.sig"
          - curl -LO "${VAGRANT_URL}"
          - curl -LO "${VAGRANT_SHA256_URL}"
          - curl -LO "${VAGRANT_SHA256_SIG_URL}"
          - HASHICORP_PUBLIC_KEY_URL="https://keybase.io/hashicorp/pgp_keys.asc" #https://www.hashicorp.com/security
          - 'curl -sSL "${HASHICORP_PUBLIC_KEY_URL}" | gpg --import -' # import the public key (PGP key)
          - gpg --verify "vagrant_${VAGRANT_CURRENT_VERSION}_SHA256SUMS.sig" "vagrant_${VAGRANT_CURRENT_VERSION}_SHA256SUMS" 2>/dev/null #Verify the signature file is untampered
          - shasum -a 256 -c "vagrant_${VAGRANT_CURRENT_VERSION}_SHA256SUMS" | sudo tee output.txt  # Verify the SHASUM matches the archive.
          - cat output.txt  | grep OK # print OK
          - unzip "vagrant_${VAGRANT_CURRENT_VERSION}_linux_amd64.zip"
          - sudo cp vagrant /usr/bin
          - vagrant version
          - echo "============================================="
          - sudo vagrant plugin install vagrant-libvirt #The vagrant-libvirt plugin is required when using KVM on Linux
          - sudo vagrant plugin install vagrant-mutate #Convert vagrant boxes to work with different providers
          - sudo vagrant status
          - sudo virsh list --all #show all running KVM/libvirt VMs
          - sudo vagrant box add "bento/centos-7.7"  --provider=virtualbox
          # - sudo vagrant up --no-parallel --provider=libvirt
          - sudo vagrant mutate "bento/centos-7.7"  libvirt
          - sudo vagrant box list #veridy installed boxes
          - source install.sh
          - sudo vagrant up  "compute01" --provider=libvirt
          # - sudo vagrant up  --provider=libvirt
          - sudo vagrant status #Check the status of the VMs to see that none of them have been created yet
          # - sudo vagrant up --provider=libvirt vg-irods01
          # - sudo vagrant up --no-parallel --provider=libvirt # vagrant serial runs
          # - travis_wait 40 sudo vagrant up --provider=libvirt
          - sudo vagrant global-status
          # - sudo vagrant ssh "vg-docker-01" -c "hostnamectl"
          - sudo vagrant ssh  -c "hostnamectl"
          - sudo virsh list --all #show all running KVM/libvirt VMs
fleet_script_vagrant_sles12_tasks : &fleet_script_vagrant_sles12_tasks
      script:
          - sudo apt-get install -y cpu-checker bridge-utils dnsmasq-base ebtables libvirt-bin libvirt-dev qemu-kvm qemu-utils ruby-dev
          - sudo systemctl status libvirtd
          - sudo libvirtd --version
          - egrep -c '(vmx|svm)' /proc/cpuinfo #If 0 it means that your CPU doesn't support hardware virtualization.If 1 or more it does - but you still need to make sure that virtualization is enabled in the BIOS.
          - sudo addgroup libvirtd
          - sudo adduser  $(id -un) libvirtd #ensure that your username is added to the group libvirtd
          - sudo kvm-ok
          - echo "============================================="
          - echo "=============Installing Vagrant=============="
          - sudo apt-get install -qqy unzip jq
          - VAGRANT_CURRENT_VERSION="$(curl -s https://checkpoint-api.hashicorp.com/v1/check/vagrant | jq -r -M '.current_version')"
          - VAGRANT_URL="https://releases.hashicorp.com/vagrant/$VAGRANT_CURRENT_VERSION/vagrant_${VAGRANT_CURRENT_VERSION}_linux_amd64.zip"
          - VAGRANT_SHA256_URL="https://releases.hashicorp.com/vagrant/$VAGRANT_CURRENT_VERSION/vagrant_${VAGRANT_CURRENT_VERSION}_SHA256SUMS"
          - VAGRANT_SHA256_SIG_URL="https://releases.hashicorp.com/vagrant/$VAGRANT_CURRENT_VERSION/vagrant_${VAGRANT_CURRENT_VERSION}_SHA256SUMS.sig"
          - curl -LO "${VAGRANT_URL}"
          - curl -LO "${VAGRANT_SHA256_URL}"
          - curl -LO "${VAGRANT_SHA256_SIG_URL}"
          - HASHICORP_PUBLIC_KEY_URL="https://keybase.io/hashicorp/pgp_keys.asc" #https://www.hashicorp.com/security
          - 'curl -sSL "${HASHICORP_PUBLIC_KEY_URL}" | gpg --import -' # import the public key (PGP key)
          - gpg --verify "vagrant_${VAGRANT_CURRENT_VERSION}_SHA256SUMS.sig" "vagrant_${VAGRANT_CURRENT_VERSION}_SHA256SUMS" 2>/dev/null #Verify the signature file is untampered
          - shasum -a 256 -c "vagrant_${VAGRANT_CURRENT_VERSION}_SHA256SUMS" | sudo tee output.txt  # Verify the SHASUM matches the archive.
          - cat output.txt  | grep OK # print OK
          - unzip "vagrant_${VAGRANT_CURRENT_VERSION}_linux_amd64.zip"
          - sudo cp vagrant /usr/bin
          - vagrant version
          - echo "============================================="
          # - sudo vagrant plugin install vagrant-libvirt #The vagrant-libvirt plugin is required when using KVM on Linux
          # - sudo vagrant plugin install vagrant-mutate #Convert vagrant boxes to work with different providers
          - sudo vagrant status
          - sudo virsh list --all #show all running KVM/libvirt VMs
          - sudo vagrant box add "suse/sles12sp2"  --provider=libvirt #https://app.vagrantup.com/centos/boxes/7
          # - sudo vagrant up --no-parallel --provider=libvirt
          # - sudo vagrant mutate "centos/7"  libvirt
          - sudo vagrant box list #veridy installed boxes
          - sudo vagrant up  --provider=libvirt
          - sudo vagrant status #Check the status of the VMs to see that none of them have been created yet
          # - sudo vagrant up --provider=libvirt vg-irods01
          # - sudo vagrant up --no-parallel --provider=libvirt # vagrant serial runs
          # - travis_wait 40 sudo vagrant up --provider=libvirt
          - sudo vagrant global-status
          # - sudo vagrant ssh "vg-docker-01" -c "hostnamectl"
          - sudo vagrant ssh  -c "hostnamectl"
          - sudo virsh list --all #show all running KVM/libvirt VMs
fleet_script_vagrant_centos_tasks : &fleet_script_vagrant_centos_tasks
      script:
          - sudo apt-get install -y cpu-checker bridge-utils dnsmasq-base ebtables libvirt-bin libvirt-dev qemu-kvm qemu-utils ruby-dev
          - sudo systemctl status libvirtd
          - sudo libvirtd --version
          - egrep -c '(vmx|svm)' /proc/cpuinfo #If 0 it means that your CPU doesn't support hardware virtualization.If 1 or more it does - but you still need to make sure that virtualization is enabled in the BIOS.
          - sudo addgroup libvirtd
          - sudo adduser  $(id -un) libvirtd #ensure that your username is added to the group libvirtd
          - sudo kvm-ok
          - echo "============================================="
          - echo "=============Installing Vagrant=============="
          - sudo apt-get install -qqy unzip jq
          - VAGRANT_CURRENT_VERSION="$(curl -s https://checkpoint-api.hashicorp.com/v1/check/vagrant | jq -r -M '.current_version')"
          - VAGRANT_URL="https://releases.hashicorp.com/vagrant/$VAGRANT_CURRENT_VERSION/vagrant_${VAGRANT_CURRENT_VERSION}_linux_amd64.zip"
          - VAGRANT_SHA256_URL="https://releases.hashicorp.com/vagrant/$VAGRANT_CURRENT_VERSION/vagrant_${VAGRANT_CURRENT_VERSION}_SHA256SUMS"
          - VAGRANT_SHA256_SIG_URL="https://releases.hashicorp.com/vagrant/$VAGRANT_CURRENT_VERSION/vagrant_${VAGRANT_CURRENT_VERSION}_SHA256SUMS.sig"
          - curl -LO "${VAGRANT_URL}"
          - curl -LO "${VAGRANT_SHA256_URL}"
          - curl -LO "${VAGRANT_SHA256_SIG_URL}"
          - HASHICORP_PUBLIC_KEY_URL="https://keybase.io/hashicorp/pgp_keys.asc" #https://www.hashicorp.com/security
          - 'curl -sSL "${HASHICORP_PUBLIC_KEY_URL}" | gpg --import -' # import the public key (PGP key)
          - gpg --verify "vagrant_${VAGRANT_CURRENT_VERSION}_SHA256SUMS.sig" "vagrant_${VAGRANT_CURRENT_VERSION}_SHA256SUMS" 2>/dev/null #Verify the signature file is untampered
          - shasum -a 256 -c "vagrant_${VAGRANT_CURRENT_VERSION}_SHA256SUMS" | sudo tee output.txt  # Verify the SHASUM matches the archive.
          - cat output.txt  | grep OK # print OK
          - unzip "vagrant_${VAGRANT_CURRENT_VERSION}_linux_amd64.zip"
          - sudo cp vagrant /usr/bin
          - vagrant version
          - echo "============================================="
          - sudo vagrant plugin install vagrant-libvirt #The vagrant-libvirt plugin is required when using KVM on Linux
          # - sudo vagrant plugin install vagrant-mutate #Convert vagrant boxes to work with different providers
          - sudo virsh list --all #show all running KVM/libvirt VMs
          - sudo vagrant box add "centos/7"  --provider=libvirt #https://app.vagrantup.com/centos/boxes/7
          # - sudo vagrant up --no-parallel --provider=libvirt
          # - sudo vagrant mutate "centos/7"  libvirt
          - sudo vagrant box list #veridy installed boxes
          # - |
          #   cat > Vagrantfile << EOF
          #   # -*- mode: ruby -*-
          #   # vi: set ft=ruby :
          #   Vagrant.configure("2") do |config|
          #     config.vm.provider "virtualbox" do |vb|
          #       vb.gui = false
          #       vb.memory = "2048"
          #       vb.cpus = 2
          #     end
          #     config.vm.define "master01" do |hpcluster|
          #       hpcluster.vm.box = "bento/centos-7.7"
          #       hpcluster.vm.hostname = "master01"
          #       hpcluster.vm.network "private_network", ip: "192.168.1.254"
          #       hpcluster.vm.provider "virtualbox" do |vb|
          #           vb.name = "master01"
          #           vb.memory = "4096"
          #       end
          #       hpcluster.vm.provision "ansible_local" do |ansible|
          #       ansible.playbook = "deploy.yml"
          #       ansible.become = true
          #       ansible.compatibility_mode = "2.0"
          #       ansible.version = "2.9.7"
          #       end
          #       hpcluster.vm.provision "shell", inline: <<-SHELL
          #       systemctl disable firewalld
          #       systemctl stop firewalld
          #       yum -y update
          #       yum install -y wget
          #       hostnamectl status
          #       SHELL
          #     end
          #   end
          #   EOF
          #   vagrant up  master01 --provider=libvirt
          # - sudo vagrant up  compute01 --provider=libvirt
          # - sudo vagrant up  --provider=libvirt
          # - source install.sh
          # - vagrant up  --provider=libvirt
          # - vagrant up  "compute01" --provider=libvirt
          # - vagrant ssh "compute01" -c "hostnamectl"
          # - sudo vagrant status #Check the status of the VMs to see that none of them have been created yet
          # - sudo vagrant up --provider=libvirt vg-irods01
          # - sudo vagrant up --no-parallel --provider=libvirt # vagrant serial runs
          # - travis_wait 40 sudo vagrant up --provider=libvirt
          - sudo vagrant global-status
          # - sudo vagrant ssh "master01" -c "hostnamectl"
          # - sudo vagrant ssh  -c "hostnamectl"
          - sudo virsh list --all #show all running KVM/libvirt VMs
fleet_script_tasks : &fleet_script_tasks
      script:
        - python --version
fleet_install_tasks : &fleet_install_tasks
      install:
        - pip install -r requirements.txt
matrix:
  fast_finish: true
  include:

    - name: "Architecture = (x86_64) [CentOS 7.7] (with Warewulf + PBS Professional) Python 3.7 on bionic amd64"
      dist: xenial
      language: python
      python: 3.7
      before_install:
        - pip3 install virtualenv
        - virtualenv -p $(which python3) ~venvpy3
        - source ~venvpy3/bin/activate
      <<: *fleet_install_tasks
      <<: *fleet_script_tasks
      <<: *fleet_script_vagrant_centos_tasks
      # <<: *fleet_script_vagrant_bentocentos7_tasks
      after_success:
        - deactivate

# #https://minikube.sigs.k8s.io/docs/drivers/podman/
# #https://podman.io/getting-started/installation
#     - name: "podman Python 3.7 on bionic amd64"
#       dist: bionic
#       language: python
#       python: 3.7
#       before_install:
#         - pip3 install virtualenv
#         - virtualenv -p $(which python3) ~venvpy3
#         - source ~venvpy3/bin/activate
#       <<: *fleet_install_tasks
#       <<: *fleet_script_tasks
#       <<: *fleet_script_vagrant_centos_tasks
#       # <<: *fleet_script_vagrant_bentocentos7_tasks
#       script:
#         # - minikube start --driver=podman --container-runtime=cri-o # Start a cluster using the podman driver with CRI-O container runtime
#         - minikube start --driver=podman #Start a cluster using the podman driver
#         - minikube config set driver podman #make docker the default driver
#       after_success:
        - deactivate

#     - name: "Architecture = (x86_64) [CentOS 7.7] (with Warewulf + Slurm) Python 3.7 on bionic amd64"
#       dist: bionic
#       language: python
#       python: 3.7
#       before_install:
#         - pip3 install virtualenv
#         - virtualenv -p $(which python3) ~venvpy3
#         - source ~venvpy3/bin/activate
#       <<: *fleet_install_tasks
#       <<: *fleet_script_tasks
#       <<: *fleet_script_vagrant_centos_tasks
#       <<: *fleet_script_vagrant_bentocentos7_tasks
#       after_success:
#         - deactivate
#
#
#     - name: "Architecture = (x86_64) [CentOS 7.7] (with xCAT (Stateless) + Slurm) Python 3.7 on bionic amd64"
#       dist: bionic
#       language: python
#       python: 3.7
#       before_install:
#         - pip3 install virtualenv
#         - virtualenv -p $(which python3) ~venvpy3
#         - source ~venvpy3/bin/activate
#       <<: *fleet_install_tasks
#       <<: *fleet_script_tasks
#       <<: *fleet_script_vagrant_centos_tasks
#       after_success:
#         - deactivate
#
#     - name: "Architecture = (x86_64) [CentOS 7.7] (with xCAT (Stateful) + Slurm) Python 3.7 on bionic amd64"
#       dist: bionic
#       language: python
#       python: 3.7
#       before_install:
#         - pip3 install virtualenv
#         - virtualenv -p $(which python3) ~venvpy3
#         - source ~venvpy3/bin/activate
#       <<: *fleet_install_tasks
#       <<: *fleet_script_tasks
#       <<: *fleet_script_vagrant_centos_tasks
#       after_success:
#         - deactivate
#
#     - name: "Architecture = (x86_64) [SLES 12 SP4] (with Warewulf + PBS Professional) Python 3.7 on bionic amd64"
#       dist: bionic
#       language: python
#       python: 3.7
#       before_install:
#         - pip3 install virtualenv
#         - virtualenv -p $(which python3) ~venvpy3
#         - source ~venvpy3/bin/activate
#       <<: *fleet_install_tasks
#       <<: *fleet_script_tasks
#       <<: *fleet_script_vagrant_sles12_tasks
#       <<: *fleet_script_vagrant_bentosles12sp3_tasks
#       <<: *fleet_script_vagrant_bentosles15sp1_tasks
#       after_success:
#         - deactivate
#
#     - name: "Architecture = (x86_64) [SLES 12 SP4] (with Warewulf + Slurm) Python 3.7 on bionic amd64"
#       dist: bionic
#       language: python
#       python: 3.7
#       before_install:
#         - pip3 install virtualenv
#         - virtualenv -p $(which python3) ~venvpy3
#         - source ~venvpy3/bin/activate
#       <<: *fleet_install_tasks
#       <<: *fleet_script_tasks
#       <<: *fleet_script_vagrant_sles12_tasks
#       <<: *fleet_script_vagrant_bentosles12sp3_tasks
#       <<: *fleet_script_vagrant_bentosles15sp1_tasks
#       after_success:
#         - deactivate
#
# # #============================================================================ multiarch linux ============================================================================
#
#       # AArch64 is the 64-bit execution state of the ARMv8 ISA. A machine in this state executes operates on the A64 instruction set
#     - name: "Architecture = (x86_64) [CentOS 7.7] (with Warewulf + PBS Professional) Python 3.7 on bionic amd64"
#       os: linux
#       dist: bionic
#       arch: arm64
#       language: python
#       python: 3.7
#       before_install:
#         - pip3 install virtualenv
#         - virtualenv -p $(which python3) ~venvpy3
#         - source ~venvpy3/bin/activate
#       <<: *fleet_install_tasks
#       <<: *fleet_script_tasks
#       <<: *fleet_script_vagrant_centos_tasks
#       <<: *fleet_script_vagrant_bentocentos7_tasks
#       after_success:
#         - deactivate
#
#     - name: "Architecture = (x86_64) [CentOS 7.7] (with Warewulf + Slurm) Python 3.7 on bionic amd64"
#       os: linux
#       dist: bionic
#       arch: arm64
#       language: python
#       python: 3.7
#       before_install:
#         - pip3 install virtualenv
#         - virtualenv -p $(which python3) ~venvpy3
#         - source ~venvpy3/bin/activate
#       <<: *fleet_install_tasks
#       <<: *fleet_script_tasks
#       <<: *fleet_script_vagrant_centos_tasks
#       <<: *fleet_script_vagrant_bentocentos7_tasks
#       after_success:
#         - deactivate
#
#     - name: "Architecture = (x86_64) [SLES 12 SP4] (with Warewulf + PBS Professional) Python 3.7 on bionic amd64"
#       os: linux
#       dist: bionic
#       arch: arm64
#       language: python
#       python: 3.7
#       before_install:
#         - pip3 install virtualenv
#         - virtualenv -p $(which python3) ~venvpy3
#         - source ~venvpy3/bin/activate
#       <<: *fleet_install_tasks
#       <<: *fleet_script_tasks
#       <<: *fleet_script_vagrant_sles12_tasks
#       <<: *fleet_script_vagrant_bentosles12sp3_tasks
#       <<: *fleet_script_vagrant_bentosles15sp1_tasks
#       after_success:
#         - deactivate
#
#
#     - name: "Architecture = (x86_64) [SLES 12 SP4] (with Warewulf + Slurm) Python 3.7 on bionic amd64"
#       os: linux
#       dist: bionic
#       arch: arm64
#       language: python
#       python: 3.7
#       before_install:
#         - pip3 install virtualenv
#         - virtualenv -p $(which python3) ~venvpy3
#         - source ~venvpy3/bin/activate
#       <<: *fleet_install_tasks
#       <<: *fleet_script_tasks
#       <<: *fleet_script_vagrant_sles12_tasks
#       <<: *fleet_script_vagrant_bentosles12sp3_tasks
#       <<: *fleet_script_vagrant_bentosles15sp1_tasks
#       after_success:
#         - deactivate
#
#     - name: "Python 3.7 on bionic ppc64le"
#       os: linux
#       arch: ppc64le
#       dist: bionic
#       language: python
#       python: 3.7
#       # env:
#       #   - LIB_PATH="/usr/bin/shared/x86_64/v1"
#       # compiler:
#       #  - gcc
#       #  - clang
#       before_install:
#         - pip3 install virtualenv
#         - virtualenv -p $(which python3) ~venvpy3
#         - source ~venvpy3/bin/activate
#       <<: *fleet_install_tasks
#       <<: *fleet_script_tasks
#       # <<: *fleet_script_vagrant_centos_tasks
#       after_success:
#         - deactivate
#
#     - name: "Python 3.7 on bionic s390x" #Unable to locate package osquery
#       os: linux
#       arch: s390x
#       dist: bionic
#       language: python
#       python: 3.7
#       # env:
#       #   - LIB_PATH="/usr/bin/shared/x86_64/v1"
#       # compiler:
#       #  - gcc
#       #  - clang
#       before_install:
#         - pip3 install virtualenv
#         - virtualenv -p $(which python3) ~venvpy3
#         - source ~venvpy3/bin/activate
#       <<: *fleet_install_tasks
#       <<: *fleet_script_tasks
#       # <<: *fleet_script_vagrant_centos_tasks
#       after_success:
#         - deactivate
#
#   # =============================================macOS=============================================
#
#     - name: "Virtualbox  Vagrant for Mac  Python 2.7.17 on macOS 10.15.4 osx xcode11.5"
#       os: osx
#       osx_image: xcode11.5
#       language: shell
#       # addons:
#       #   homebrew:
#       #     packages:
#       #     - beanstalk
#       #     update: true
#       addons:
#         homebrew:
#           # brewfile: Brewfile.travis
#           # packages:
#           #   - multipass
#           # taps: homebrew/cask-versions
#           casks: # Installing Casks
#             - virtualbox
#             - vagrant
#           update: true
#       before_install:
#         - pip install virtualenv
#         - virtualenv -p $(which python2) ~venvpy2
#         - source ~venvpy2/bin/activate
#       <<: *fleet_install_tasks
#       <<: *fleet_script_tasks
#       <<: *fleet_script_vagrant_macos_tasks
#       script:
#         # - brew cask install vagrant
#         # - brew cask install virtualbox
#         - brew list --versions
#       after_success:
#         - brew cask uninstall multipass
#         - deactivate
#
#     - name: "Docker for Mac   Python 2.7.17 on macOS 10.15.4 osx xcode11.5"
#       os: osx
#       osx_image: xcode11.5
#       language: shell
#       # addons:
#       #   homebrew:
#       #     packages:
#       #     - beanstalk
#       #     update: true
#       addons:
#         homebrew:
#           # brewfile: Brewfile.travis
#           # packages:
#           #   - multipass
#           # taps: homebrew/cask-versions
#           casks: # Installing Casks
#             - docker
#           update: true
#       before_install:
#         - pip install virtualenv
#         - virtualenv -p $(which python2) ~venvpy2
#         - source ~venvpy2/bin/activate
#       <<: *fleet_install_tasks
#       <<: *fleet_script_tasks
#       <<: *fleet_script_vagrant_macos_tasks
#       script:
#         # - brew cask install docker
#         # - open /Applications/Docker.app  # Start Docker
#         - brew list --versions
#       after_success:
#         - brew cask uninstall multipass
#         - deactivate
#

# #https://minikube.sigs.k8s.io/docs/drivers/podman/
# #https://podman.io/getting-started/installation
#     - name: "podman for Mac   Python 2.7.17 on macOS 10.15.4 osx xcode11.5"
#       os: osx
#       osx_image: xcode11.5
#       language: shell
#       # addons:
#       #   homebrew:
#       #     packages:
#       #     - beanstalk
#       #     update: true
#       addons:
#         homebrew:
#           # brewfile: Brewfile.travis
#           # packages:
#           #   - multipass
#           # taps: homebrew/cask-versions
#           casks: # Installing Casks
#             - podman
#           update: true
#       before_install:
#         - pip install virtualenv
#         - virtualenv -p $(which python2) ~venvpy2
#         - source ~venvpy2/bin/activate
#       <<: *fleet_install_tasks
#       <<: *fleet_script_tasks
#       <<: *fleet_script_vagrant_macos_tasks
#       script:
#         # - brew cask install podman
#         # - minikube start --driver=podman --container-runtime=cri-o # Start a cluster using the podman driver with CRI-O container runtime
#         - minikube start --driver=podman #Start a cluster using the podman driver
#         - minikube config set driver podman #make docker the default driver
#         - brew list --versions
#       after_success:
#         - brew cask uninstall multipass
#         - deactivate
#

# # =============================================windows=============================================
#
#     - name: "vagrant Python 3.8 on Windows"
#       os: windows
#       language: shell
#       env:
#         - PATH=/c/Python38:/c/Python38/Scripts:$PATH
#       before_install:
#         - choco install python --version 3.8.1
#         - pip install virtualenv
#         - virtualenv $HOME/venv
#         - source $HOME/venv/Scripts/activate
#       <<: *fleet_install_tasks
#       <<: *fleet_script_tasks
#       <<: *fleet_script_vagrant_win_tasks
#       <<: *fleet_script_vagrant_win_scoop_tasks
#       after_success:
#         - deactivate

#
#     - name: "Docker Desktop for Windows Python 3.8 on Windows"
#       os: windows
#       language: shell
#       env:
#         - PATH=/c/Python38:/c/Python38/Scripts:$PATH
#       before_install:
#         - choco install python --version 3.8.1
#         - pip install virtualenv
#         - virtualenv $HOME/venv
#         - source $HOME/venv/Scripts/activate
#       <<: *fleet_install_tasks
#       <<: *fleet_script_tasks
#       <<: *fleet_script_vagrant_win_tasks
#       <<: *fleet_script_vagrant_win_scoop_tasks
          # script:
          #   - choco install docker-desktop Windows
#       after_success:
#         - deactivate
